// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi"
)

// Employee defines model for Employee.
type Employee struct {
	Department string `json:"department"`
	Email      string `json:"email"`
	FirstName  string `json:"firstName"`
	Id         string `json:"id"`
	LastName   string `json:"lastName"`
	Role       string `json:"role"`
}

// NewProject defines model for NewProject.
type NewProject struct {
	Name     string  `json:"name"`
	Progress float32 `json:"progress"`
	State    string  `json:"state"`
}

// Project defines model for Project.
type Project struct {
	// Embedded struct due to allOf(#/components/schemas/NewProject)
	NewProject `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id    string    `json:"id"`
	Owner *Employee `json:"owner,omitempty"`

	// paticipants in the project
	Paticipants *[]Employee `json:"paticipants,omitempty"`
}

// CreateProjectJSONBody defines parameters for CreateProject.
type CreateProjectJSONBody NewProject

// UpdateProjectJSONBody defines parameters for UpdateProject.
type UpdateProjectJSONBody NewProject

// AssignProjectOwnerJSONBody defines parameters for AssignProjectOwner.
type AssignProjectOwnerJSONBody struct {
	EmployeeId *string `json:"employeeId,omitempty"`
}

// AssignProjectParticipantsJSONBody defines parameters for AssignProjectParticipants.
type AssignProjectParticipantsJSONBody struct {
	EmployeeIds *[]string `json:"employeeIds,omitempty"`
}

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody CreateProjectJSONBody

// UpdateProjectJSONRequestBody defines body for UpdateProject for application/json ContentType.
type UpdateProjectJSONRequestBody UpdateProjectJSONBody

// AssignProjectOwnerJSONRequestBody defines body for AssignProjectOwner for application/json ContentType.
type AssignProjectOwnerJSONRequestBody AssignProjectOwnerJSONBody

// AssignProjectParticipantsJSONRequestBody defines body for AssignProjectParticipants for application/json ContentType.
type AssignProjectParticipantsJSONRequestBody AssignProjectParticipantsJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all projects
	// (GET /projects)
	GetProjects(w http.ResponseWriter, r *http.Request)
	// Create new Project
	// (POST /projects)
	CreateProject(w http.ResponseWriter, r *http.Request)
	// Update project
	// (PUT /projects/{id})
	UpdateProject(w http.ResponseWriter, r *http.Request, id string)
	// Assign owner to project
	// (POST /projects/{id}/assign/owner)
	AssignProjectOwner(w http.ResponseWriter, r *http.Request, id string)
	// Assign participants to project
	// (POST /projects/{id}/assign/participants)
	AssignProjectParticipants(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetProjects operation middleware
func (siw *ServerInterfaceWrapper) GetProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetProjects(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateProject operation middleware
func (siw *ServerInterfaceWrapper) CreateProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateProject(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateProject operation middleware
func (siw *ServerInterfaceWrapper) UpdateProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateProject(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AssignProjectOwner operation middleware
func (siw *ServerInterfaceWrapper) AssignProjectOwner(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AssignProjectOwner(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AssignProjectParticipants operation middleware
func (siw *ServerInterfaceWrapper) AssignProjectParticipants(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AssignProjectParticipants(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/projects", wrapper.GetProjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects", wrapper.CreateProject)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/projects/{id}", wrapper.UpdateProject)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{id}/assign/owner", wrapper.AssignProjectOwner)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/projects/{id}/assign/participants", wrapper.AssignProjectParticipants)
	})

	return r
}

